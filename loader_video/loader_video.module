<?php
/**
 * Created by PhpStorm.
 * User: hautruong
 * Date: 26/09/2016
 * Time: 17:05
 */

define('LOADER_IMAGE_MAX_SIZE_LIMIT_DS', 8);
define('LOADER_VIDEO_IMAGE_DEST', 'loader_video_public');

function loader_video_type() {
  return array('');
}

/**
 * Implements hook_field_formatter_info().
 */
function loader_video_field_formatter_info() {
  return array(
    'videojs' => array(
      'label' => t('Video.js : HTML5 Video Player'),
      'field types' => array(
        'file',
        'media',
        'link_field',
        'field_loader_video'
      ),
      'description' => t('Display a video file as an HTML5-compatible with Flash-fallback video player.'),
      'settings' => array(
        'width' => NULL,
        'height' => NULL,
        'posterimage_field' => NULL,
        'posterimage_style' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function loader_video_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] !== 'videojs') {
    return array();
  }
  if (empty($items)) {
    return array();
  }

  if ($field['type'] == 'link_field') {
    //for field type of 'link_field' do things differently
  }

  $settings = $display['settings'];
  $attributes = array();
  if (!empty($settings['width']) && !empty($settings['height'])) {
    $attributes['width'] = intval($settings['width']);
    $attributes['height'] = intval($settings['height']);
  }


  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $data = array(
    'items' => $items,
    'player_id' => 'videojs-' . $id . '-' . str_replace('_', '-', $instance['field_name']),
    'attached' => videojs_add(FALSE),
    'entity' => $entity,
    'entity_type' => $entity_type,
    'attributes' => $attributes,
    'posterimage_style' => !empty($settings['posterimage_style']) ? $settings['posterimage_style'] : NULL,
  );
//  return theme('video_loader_default', $data);
  return array(
    array(
      '#theme' => 'video_loader_default',
      '#items' => $items,
      '#player_id' => 'videojs-' . $id . '-' . str_replace('_', '-', $instance['field_name']),
      '#attached' => videojs_add(FALSE),
      '#entity' => $entity,
      '#entity_type' => $entity_type,
      '#attributes' => $attributes,
      '#posterimage_style' => !empty($settings['posterimage_style']) ? $settings['posterimage_style'] : NULL,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function loader_video_theme($existing, $type, $theme, $path) {
  return array(
    'video_loader_default' => array(
      'variables' => array(
        'items' => NULL,
        'player_id' => NULL,
        'attributes' => NULL,
        'entity' => NULL,
        'entity_type' => NULL,
        'posterimage_style' => NULL
      ),
      'template' => 'themes/video_loader_default',
    ),
    'video_loader_thumb_upload' => array(
      'render element' => 'element',
      'template' => 'themes/video_loader_thumb_upload',
    )
  );
}

function videojs_theme() {

}

function videojs_add($add = FALSE) {
  $added = &drupal_static(__FUNCTION__);

  switch (variable_get('videojs_location', 'path')) {
    case 'path':
      $path = variable_get('videojs_directory', drupal_get_path('module', 'loader_video') . '/includes/lib/videojs');
      $remote = strpos($path, '://') !== FALSE || strncmp('//', $path, 2) === 0;
      break;

    case 'libraries':
      if (!module_exists('libraries')) {
        return FALSE;
      }
      $path = libraries_get_path('video-js');
      if ($path === FALSE) {
        return FALSE;
      }
      $remote = FALSE;
      break;

    case 'cdn':
    default:
      $path = '//vjs.zencdn.net/4.0';
      $remote = TRUE;
  }

  $jsdata = $path . '/video.js';
  $youtube_jsdata = $path . '/youtube.min.js';
  $jsopts = array(
    'group' => JS_LIBRARY,
    'preprocess' => !$remote,
    'type' => $remote ? 'external' : 'file',
    'weight' => 1
  );
  $cssdata = $path . '/video-js.css';
  $cssopts = array(
    'preprocess' => !$remote,
    'type' => $remote ? 'external' : 'file'
  );
  $swfdata = 'videojs.options.flash.swf = "' . file_create_url($path . '/video-js.swf') . '"';
  $swfopts = array('group' => JS_LIBRARY, 'type' => 'inline', 'weight' => 5);

  if ($add && !$added) {
    drupal_add_js($jsdata, $jsopts);
    drupal_add_css($cssdata, $cssopts);
    drupal_add_js($swfdata, $swfopts);
    drupal_add_js($youtube_jsdata, $swfopts);
    $added = TRUE;
  }

  return array(
    'js' => array(
      $jsdata => $jsopts,
      $swfdata => $swfopts,
      $youtube_jsdata => $jsopts,
    ),
    'css' => array(
      $cssdata => $cssopts,
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function loader_video_field_info() {
  return array(
    'field_loader_video' => array(
      'label' => t('Video Player'),
      'description' => t('field containing info about one of the layers part of the Rev Slider'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'field_loader_video_widget',
      'default_formatter' => 'videojs',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function loader_video_field_widget_info() {
  return array(
    'field_loader_video_widget' => array(
      'label' => t('Video Loader Widget'),
      'field types' => array('field_loader_video'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function loader_video_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  dsm($element);
  dsm($form_state);
  dsm($items);
  $widget = $element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'field_loader_video_widget' :
      $widget['loader_video'] = array(
        '#type' => 'fieldset',
        '#title' => $element['#title'],
        '#tree' => TRUE,
      );
      $widget['loader_video']['thumbnail'] = array(
        '#title' => t('Thumbnail'),
        '#type' => 'managed_file',
        '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),
        '#default_value' => isset($element['#value']['thumbnail']) ? $element['#value']['thumbnail'] : '',
        '#upload_location' => 'public://' . LOADER_VIDEO_IMAGE_DEST . '/img',
        '#states' => array(
          'visible' => array(
//                ':input[title="content_choice_'.$element['#delta'].'"]' => array('value' => 'image'),
            ':input[name="content_choice[' . $element['#delta'] . ']"]' => array('value' => 'image'),
          ),
        ),
        '#upload_validators' => array(
          'file_validate_extensions' => array('jpg jpeg png gif'),
          // Pass the maximum file size in bytes
          'file_validate_size' => array(LOADER_IMAGE_MAX_SIZE_LIMIT_DS * 1024 * 1024),
        ),
        '#theme' => 'video_loader_thumb_upload',
        '#weight' => 1,
      );
      $widget['loader_video']['uri'] = array(
        '#type' => 'textfield',
        '#title' => t('Link Video'),
        '#default_value' => isset($items[$delta]['uri']) ? $items[$delta]['uri'] : '',
        '#required' => $element['#required'],
        '#size' => 60,
        '#attributes' => array('maxlength' => 500),
        '#weight' => 2,
      );
      $widget['loader_video']['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom Class'),
        '#default_value' => isset($items[$delta]['class']) ? $items[$delta]['class'] : '',
        '#size' => 60,
        '#attributes' => array('maxlength' => 500),
        '#weight' => 3,
      );
      break;
  }
  return $widget;
}


/**
 * Implements hook_field_is_empty().
 */
function loader_video_field_is_empty($item, $field) {
  return !isset($item);
}

/**
 * Implements hook_field_settings_form().
 */
function loader_video_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add your global settings fields here
  $form = array();
  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function loader_video_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  // Add your instance settings fields here.
  $form = array();
  return $form;
}

/**
 * Implements hook_field_presave().
 */
function loader_video_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['loader_video']['uri'])) {
      $items[$delta]['thumbnail'] = $item['loader_video']['thumbnail'];
      $items[$delta]['uri'] = $item['loader_video']['uri'];
      $items[$delta]['class'] = $item['loader_video']['class'];
    }
  }
}